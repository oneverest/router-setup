#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

log_level=3
log_stderror=no
log_facility=LOG_LOCAL0

children=4

/* uncomment the following lines to enable debugging */
# debug_mode=yes

/* uncomment the next line to enable the auto temporary blacklisting of not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases based on reverse DNS on IPs */
auto_aliases=no

# 106.75.28.34
# 106.75.85.188

# set listeners for all protocols
listen=udp:10.10.32.38:8888 as 106.75.28.34:8888
listen=tcp:10.10.32.38:8888 as 106.75.28.34:8888
listen=udp:127.0.0.1:8888 as 106.75.28.34:8888   # CUSTOMIZE ME
listen=tcp:127.0.0.1:8888 as 106.75.28.34:8888

listen=ws:10.10.32.38:8086 as 106.75.28.34:8086
listen=wss:10.10.32.38:443 as 106.75.28.34:443
listen=tls:10.10.32.38:8889 as 106.75.28.34:8889
listen=ws:127.0.0.1:8086 as 106.75.28.34:8086
listen=wss:127.0.0.1:443 as 106.75.28.34:443
listen=tls:127.0.0.1:8889 as 106.75.28.34:8889

# listen = hep_tcp:10.10.32.38:8885



####### Modules Section ########

#set module path
mpath="/usr/local/opensips/lib64/opensips/modules/"

#### db_postgres module
loadmodule "db_postgres.so"
modparam("db_postgres", "timeout", 5)
modparam("db_postgres", "max_db_queries", 2)
modparam("db_postgres", "exec_query_threshold", 60000)

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timeout", 5)
modparam("tm", "fr_inv_timeout", 120)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

loadmodule "avpops.so"
modparam("avpops", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")
modparam("avpops", "db_url", "1 postgres://api:api@localhost:5432/api")

#### Record Route Module
loadmodule "rr.so"
/* If turned on, request's from-tag is appended to record-route; 
  that's useful for understanding whether subsequent requests (such as BYE) 
  come from caller (route's from-tag==BYE's from-tag) 
  or callee (route's from-tag==BYE's to-tag) */
modparam("rr", "append_fromtag", 0)

#### Dialog Module
loadmodule "dialog.so"
modparam("dialog", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")
modparam("dialog", "db_mode", 2)
modparam("dialog", "db_update_period", 120)
modparam("dialog", "dlg_match_mode", 1)
modparam("dialog", "default_timeout", 21600)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
loadmodule "mi_fifo.so"
modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
modparam("mi_fifo", "fifo_mode", 0666)

#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)
# modparam("uri", "use_domain", 1)
# modparam("uri", "db_table", "uri")
modparam("uri", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "use_domain", 1)
modparam("usrloc", "nat_bflag", "NAT_BFLAG")
modparam("usrloc", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")
modparam("usrloc", "working_mode_preset", "single-instance-sql-write-back")

#### nathelper module
loadmodule "nathelper.so"
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "received_avp", "$avp(rcv)")
modparam("nathelper", "sipping_from", "sip:pinger@opensips.org")
modparam("nathelper", "sipping_bflag", "SIPPING_ENABLE")

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
modparam("registrar", "received_avp", "$avp(rcv)")
/* uncomment the next line not to allow more than 1 contacts per AOR */
modparam("registrar", "max_contacts", 1)

#### ACCounting module
# loadmodule "acc.so"
/* what special events should be accounted ? */
# modparam("acc", "early_media", 0)
# modparam("acc", "report_cancels", 0)
/* by default we do not adjust the direct of the sequential requests.
   if you enable this parameter, be sure to enable "append_fromtag"
   in "rr" module */
# modparam("acc", "detect_direction", 0)
# modparam("acc", "log_facility", "LOG_LOCAL1")
# modparam("acc", "log_level", 2)
# modparam("acc", "extra_fields", "log: src_ip; dst_ip; caller; callee; primary_call_id; domain; direction")

# load our certificate management module
loadmodule "tls_mgm.so"
# modparam our certificate information
modparam("tls_mgm", "certificate","/etc/letsencrypt/live/winstock.com.cn/cert.pem")
modparam("tls_mgm", "private_key","/etc/letsencrypt/live/winstock.com.cn/privkey.pem")
modparam("tls_mgm", "require_cert", "0")
modparam("tls_mgm", "verify_cert", "0")

#load all protocol modules
loadmodule "proto_udp.so"
loadmodule "proto_tcp.so"
loadmodule "proto_tls.so"
loadmodule "proto_wss.so"
modparam("proto_wss", "wss_port", 443)
modparam("proto_wss", "wss_max_msg_chunks", 8)
loadmodule "proto_ws.so"
modparam("proto_ws", "ws_port", 8086)
modparam("proto_ws", "ws_max_msg_chunks", 8)

# auth
loadmodule "auth.so"

# auth_db
loadmodule "auth_db.so"
modparam("auth_db", "use_domain", 1)
modparam("auth_db", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")

# stun module
# 106.75.28.34
# 106.75.85.188
# loadmodule "stun.so"
# modparam("stun", "primary_ip", "10.10.32.38 / 106.75.28.34")
# modparam("stun", "primary_port", "8888")
# modparam("stun", "alternate_ip", "127.0.0.1 / 106.75.28.34")
# modparam("stun", "alternate_port", "3478 / 8888")

# domain module
loadmodule "domain.so"
modparam("domain", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")
modparam("domain", "db_mode", 0) # CUSTOMIZE ME, 0 means non-caching, 1 means caching.

# alias_db module
loadmodule "alias_db.so"
modparam("alias_db", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")

# load httpd module, 服务器测试环境填写 docker0 接口地址
loadmodule "httpd.so"
modparam("httpd", "ip", "172.17.0.1")
modparam("httpd", "port", 8080)
modparam("httpd", "buf_size", 524288)
modparam("httpd", "post_buf_size", 4096)

# load mi_json module
loadmodule "mi_json.so"

# load group module
loadmodule "group.so"
modparam("group", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")
modparam("group", "use_domain", 1)

loadmodule "textops.so"

# loadmodule "b2b_entities.so"
# modparam("b2b_entities", "script_req_route", "b2b_request")
# modparam("b2b_entities", "script_reply_route", "b2b_reply")
# modparam("b2b_entities", "db_mode", 2)
# modparam("b2b_entities", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")

# loadmodule "siprec.so"




# load siptrace module
# loadmodule "siptrace.so"
# modparam("siptrace", "trace_on", 1)
# modparam("siptrace", "trace_local_ip", "udp:10.10.32.38:8888")
# modparam("siptrace", "trace_id", "[tid]uri=postgres://opensips:opensips@localhost:5432/opensips;table=sip_trace")


# permissions module
# todo for IP authentication
loadmodule "permissions.so"
modparam("permissions", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")

loadmodule "dialplan.so"
modparam("dialplan", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")

loadmodule "freeswitch.so"
modparam("freeswitch", "event_heartbeat_interval", 20)
modparam("freeswitch", "esl_connect_timeout", 5000)
modparam("freeswitch", "esl_cmd_timeout", 5000)
modparam("freeswitch", "esl_cmd_polling_itv", 3000)

loadmodule "load_balancer.so"
modparam("load_balancer", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")
modparam("load_balancer", "probing_interval", 60)
modparam("load_balancer", "probing_from", "sip:pinger@10.10.32.38")
modparam("load_balancer", "probing_reply_codes", "501, 403")
modparam("load_balancer", "probing_verbose", 1)
modparam("load_balancer", "fetch_freeswitch_stats", 1)
modparam("load_balancer", "initial_freeswitch_load", 1000)

loadmodule "regex.so"
modparam("regex", "file", "/usr/local/opensips/etc/regex_groups.cfg")

# load benchmark module, use bm_start_timer and bm_log_timer to benchmark
loadmodule "benchmark.so"
modparam("benchmark", "enable", 1)
# CUSTOMIZE me to 100 or 500 in production
modparam("benchmark", "granularity", 500)
modparam("benchmark", "loglevel", 3)

# loadmodule "proto_ws.so"
# modparam("proto_ws", "ws_port", 8885)
# modparam("proto_ws", "ws_send_timeout", 100)
# modparam("proto_ws", "ws_max_msg_chunks", 4)

# loadmodule "proto_hep.so"
# modparam("proto_hep", "trace_destination", "[hep_dest]10.0.0.2;transport=tcp;version=3")
# modparam("proto_ws", "trace_destination", "hep_dest")

loadmodule "rtpengine.so"
modparam("rtpengine", "rtpengine_tout", 2)
modparam("rtpengine", "db_url", "postgres://opensips:opensips@localhost:5432/opensips")


####### Routing Logic ########

# main request routing logic
route {
  # xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: start routing for: $si");
  # force_rport();
  # $var(domain) = "opensips.org";
  # $var($var(domain)) = "1.2.3.4";
  # xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: $var($var(domain))");
  # route(find_server, $var(domain));
  # send_reply("404", "NOT FOUND");
  # exit;
  if ($proto == "WS" || $proto == "WSS") {
    xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Okay, set SRC_WS successfully! si=$si sp=$sp $hdr(Call-ID)");
    setflag(SRC_WS);
  }
  route(nathelper);

  # dectect too many hops
  if (!mf_process_maxfwd_header("10")) {
    send_reply("483", "Too Many Hops");
    exit;
  }

  if (has_totag()) {
    if (loose_route()) {
      if (is_method("BYE")) {
        # noop: we use dialog level accounting instead of transaction level 
      } else if (is_method("INVITE")) {
        record_route();
      }

      route(relay);
    } else {
      if (is_method("ACK")) {
        if (t_check_trans()) {
          route(relay);
        }
        exit;
      }
      sl_send_reply("404", "Not here");
    }
    exit;
  }

  if (is_method("OPTIONS")) {
    send_reply("200", "OK");
    exit;
  }

  if (is_method("CANCEL")) {
    if (t_check_trans()) {
      route(relay);
    }
    exit;
  }

  # detect retransmission
  t_check_trans();
  if (is_method("INVITE")) {
    if (isflagset(SRC_WS)) {
      xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: an invite from a ws/wss client");
      fix_nated_contact();
    }
    xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: original value in [$rm]: ru=$ru fu=$fu tu=$tu du=$du");
  }

  if (is_audio_on_hold()) {
    xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Hold original value in [$rm]: ru=$ru fu=$fu tu=$tu du=$du");
    switch ($rc) {
      case 1:
        xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: RFC2543 hold type");
        break;
      case 2:
        xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: RFC3264 hold type");
        break;
    }
  }

  # test async
  # async(avp_db_query(
  #       "SELECT m.host,m.port FROM account t left join media_server m on t.media_server_id=m.id WHERE t.domain='$(rd{s.escape.common})'", 
  #       "$avp(ms_host);$avp(ms_port)", 
  #       "1"), "select_ms_resume_route");
  
  if (!is_method("register")) {
    if (!is_domain_local("$fd")) {
      if (!is_domain_local("$rd")) {
        send_reply("403", "Relay forbidden");
        exit;
      }
    }
  }

  # preloaded route checking
  if (loose_route()) {
    xlog("L_ERR", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
    if (!is_method("ACK")) {
      sl_send_reply("403", "Preload route denied");
    }
    exit;
  }

  if (is_method("PUBLISH|SUBSCRIBE")) {
    sl_send_reply("503", "Service Unavailable");
    exit;
  }

  if (!is_method("REGISTER|MESSAGE"))
    record_route();

  # if (!is_method("")) {
  #   # append_hf("P-hint: outbound\r\n");
  #   route(relay);
  # }

  if (is_method("REGISTER")) {
    if (isflagset(SRC_WS)) {
      setbflag(DST_WS);
    }

    if (!www_authorize("", "subscriber")) {
      www_challenge("", "0");
      exit;
    }

    if (!db_check_to()) {
      sl_send_reply("403", "Forbidden auth ID");
      exit;
    }

    consume_credentials();

    if ($proto == "tcp") {
      setflag(TCP_PERSISTENT);
    }

    remove("location", "$tu");
    if (!save("location")) {
      sl_reply_error();
    }
    exit;
  }

  if (is_method("INVITE")) {
    if (is_present_hf("X-ORIGINATE-OP")) {
      xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: x-originate-opcode: $hdr(X-ORIGINATE-OP)");
      switch($(hdr(X-ORIGINATE-OP){s.int}))
      {
        case 1: # api call to pstn
          xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: api call to pstn, ru: $ru, fu: $fu, tu: $tu");
          if (is_present_hf("X-Redirect-To-User")) {
            xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: pstn account header has been detected");
            if (lb_is_destination("$si", "$sp", "3")) {
              lb_count_call("$si", "$sp", "3", "channels");
            }
            $avp(dst) = $rU;
            $rU = $hdr(X-Redirect-To-User);
            route(location);
            $rU = $avp(dst);
            route(relay);
          } else {
            xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: no valid header");
            send_reply("500", "Server Internal Error");
          }
          exit;
          break;
        case 2: # api call to agent
          xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: api call to agent, ru: $ru, fu: $fu, tu: $tu");
          break;
        default:
          xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: invalid X-ORIGINATE-OP code");
          send_reply("500", "Internal Server Error");
          exit;
      }
    } else {
      append_hf("X-Original-Number: $rU\r\n");

      # do_accounting("log", "cdr");

      # $acc_extra(src_ip) = $si;
      # $acc_extra(caller) = $fU + "@" + $fd;
      # $acc_extra(callee) = $tU + "@" + $td;
      # if (is_present_hf("X-Call-ID")) {
      #   $acc_extra(primary_call_id) = $hdr(X-Call-ID);
      # } else {
      #   $acc_extra(primary_call_id) = $ci;
      # }

      if (is_domain_local("$fd")) {
        # $acc_extra(domain) = $fd;
        if (!proxy_authorize("", "subscriber")) {
          proxy_challenge("", "0");
          exit;
        }
        consume_credentials();

        xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: From username: $fu");
        if (!db_check_from()) {
          if (!alias_db_lookup("dbaliases")) {
            sl_send_reply("403", "Forbidden auth ID");
            exit;
          }
          xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: request uri: $ru");
        } else {
          xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Okay, call to private gw now\n$ru\n$du\n$fu\n$tu");
          if (!pcre_match_group("$ua", "3") && !db_check_to()) {
            # $avp(destination_number) = $rU;
            # if (subst_uri("/^sip:[0-9]+@(.*)$/sip:8210@\1/i")) {
            #   xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: subst_uri: $ru");
            # }
            # route(location);
            # $rU = $avp(destination_number);
            # xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: modified request uri: $ru");

            if (lb_start("3", "channels")) {
              xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: lb_start: sending outbound call to $du\n");
              # $rU = "outbound-" + $avp(destination_number);
              # xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: rewrite rU: $rU\n");
            } else {
              xlog("L_ERR", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: lb_start: media server resource exhausted");
              send_reply("503", "Service Unavailable");
              exit;
            }
            route(relay);
          }
        }

      } else {
        # refuse foreign from URI dial foreign request URI
        if (!is_domain_local("$rd")) {
          sl_send_reply("403", "Relay forbidden");
          exit;
        } else {
          # $acc_extra(domain) = $rd;
          # todo process call from gw
          if (check_source_address("2")) {
            # todo for trusted gw
            if (!dp_translate("2", "$rU/$rU")) {
              send_reply("404", "Bad PSTN number");
              exit;
            }
            if (!alias_db_lookup("dbaliases")) {
              send_reply("404", "DID not found");
              exit;
            }
          } else {
            if (check_address("3", "$si", "$sp", "$rP")) {
              # from media server
              xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: fs fu: $fu");
              $avp(dst) = $rU;
              if (is_present_hf("X-Redirect-To-User")) {
                $rU = $hdr(X-Redirect-To-User);
              }
              route(location);
              $rU = $avp(dst);

              # if (is_present_hf("X-Call-ID")) {
              #   $acc_extra(primary_call_id) = $hdr(X-Call-ID);
              # } else {
              #   $acc_extra(primary_call_id) = $ci;
              # }
              route(relay);
            } else {
              if (!proxy_authorize("", "subscriber")) {
                proxy_challenge("", "0");
                exit;
              }
            }
          }
        }
      }

      # if (is_from_local() && !is_uri_host_local()) {
      #   append_hf("P-hint: outbound\r\n");
      #   # todo send call to gw
      #   exit;
      # }
    }
  }

  alias_db_lookup("dbaliases");
  route(location);

  # may do_accounting
  # route(sdp);
  if (is_method("INVITE")) {
    xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: before relay: $tu");
    # if (check_address("3", "$si", "$sp", "$rP")) {
    #   #noop
    # } else {
    #   # todo: load balance
    #   $du = "sip:10.10.163.6:8882";
    # }

    # async(avp_db_query(
    # "SELECT * FROM subscriber", 
    # "$avp(domain)", 
    # "1"), "db_resume_route");

    if (lb_is_destination("$si", "$sp", "3")) {
      # request from freeswitch
      lb_count_call("$si", "$sp", "3", "channels");
    } else {
      # if (lb_start("3", "channels")) {
      #   xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: lb_start: sending call to $du\n");
      # } else {
      #   xlog("L_ERR", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: lb_start: media server resource exhausted");
      #   send_reply("503", "Service Unavailable");
      #   exit;
      # }

      # async(avp_db_query(
      #   "SELECT m.host,m.port FROM account t left join media_server m on t.media_server_id=m.id WHERE t.domain='$(td{s.escape.common})'", 
      #   "$avp(ms_host);$avp(ms_port)", 
      #   "1"), "select_ms_resume_route");

      # 根据域名确认对应的媒体服务器
      async(avp_db_query(
        "SELECT m.host,m.port FROM submission t LEFT JOIN account a on a.\"submissionId\"=t.id LEFT JOIN media_server m on a.\"mediaServerId\"=m.id WHERE t.domain='$(td{s.escape.common})'", 
        "$avp(ms_host);$avp(ms_port)", 
        "1"), "select_ms_resume_route");
    }
  }
  route(relay);
}

route[relay] {
  xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: relay [$rm] request from $fu URI to $ru");
  # do_accounting("log", "missed");
  if (is_method("INVITE")) {
    if (!has_totag()) {
      create_dialog();
    }

    # route(sdp);

    # rtpengine
    if (has_body("application/sdp")) {
      route(rtp_offer);
      if ($rc) {
        t_on_reply("1");
      } else {
        send_reply("500", "rtp proxy error");
        exit;
      }
    } else {
      t_on_reply("2");
    }

    t_on_branch("per_branch_ops");
    t_on_failure("missed_call");
  }

  # rtpengine
  if (is_method("ACK") && has_body("application/sdp")) {
    route(rtp_answer);
  }
  if (is_method("BYE|CANCEL")) {
    xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: BYE: du=$du ru=$ru");
    if (isbflagset(DST_WS)) {
      xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Destination is wss/ws client");
    # } else {
    #   xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Destination is not wss/ws client");
    }
    if ($ru=~"transport=(ws|wss)") {
      fix_nated_contact();
      xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: RU Destination is wss/ws client"); 
    # } else {
    #   xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: RU Destination is not wss/ws client");
    }
    route(rtp_delete);
  }

  if (!t_relay()) {
    send_reply("500", "Internal Error");
  }
  exit;
}

route[find_server] {
  if ($param(1) == NULL) {
    send_reply("500", "Internal Error");
    exit;
  }
  xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: $param(1)");
}

route[location] {
  if (!lookup("location", "m")) {
    if (!db_does_uri_exist()) {
      send_reply("420", "Bad Extension");
      exit;
    }
    xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: $ru, $fu, $tu, $du");
    t_reply("404", "Not Found");
    exit;
  }

  if ($rU==NULL) {
    sl_send_reply("484", "Address Incomplete");
    exit;
  }
}

route[nathelper] {
  if (nat_uac_test("19")) {
    if (is_method("REGISTER")) {
      xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Run fix_nated_register for $proto");
      fix_nated_register();
      if ($proto == "WS" || $proto == "WSS") {
        xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Fix the contact for ws/wss");
        fix_nated_contact();
      }
      setbflag(NAT_BFLAG);
      setbflag(SIPPING_ENABLE);
    } 
    # else {
    #   fix_nated_contact();
    #   setflag(NAT_BFLAG);
    # }
  }

  return;
}

route[sdp] {
  if (is_method("INVITE")) {
    if (isflagset(SRC_WS)) {
      if (has_body("application/sdp")) {
        xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: rewrite sdp");
        fix_nated_sdp("10");
      }
    }
  }
}

branch_route[per_branch_ops] {
  xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: new branch at $ru\n");
}

# onreply_route[handle_nat] {
#   xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: incoming reply: $rb\n");
#   if ($rs >= 200) {
#     # $acc_extra(dst_ip) = $si;
#   }
#   # fix_nated_sdp("10");
#   # if((isflagset(NAT_BFLAG) || isbflagset(NAT_BFLAG)) && $rs~="(183)|(2[0-9][0-9])") {
#     # todo MRS
#   # }

#   if(isbflagset(NAT_BFLAG)) {
#     search_append("Contact:.*sip:[^[:cntrl:]]*", ";nat=yes");
#     fix_nated_contact();
#     xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Fix the nated contact $hdr(Contact)");
#   }
# }

route[handle_nat] {
  $var(origin_contact) = $hdr(Contact);
  if(isbflagset(NAT_BFLAG)) {
    search_append("Contact:.*sip:[^[:cntrl:]]*", ";nat=yes");
    fix_nated_contact();
  }
}

local_route {
  xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: send out request to $ru");
}

failure_route[missed_call] {
  if (t_was_cancelled()) {
    exit;
  }
  route(rtp_delete);

  xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: failed when sending request to $ru");

  if (t_check_status("3[0-9][0-9]")) {
    t_reply("404", "Not found");
    exit;
  }
}

route[db_resume_route] {
  xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Results: $(avp(domain)[*])\n");
}

route[select_ms_resume_route] {
  xlog("L_INFO", "[$rm | $proto | $si:$sp | $hdr(Call-ID)]: Using sip:$avp(ms_host):$avp(ms_port) for inbound call from $td\n");
  # $du = "sip:$avp(ms_host):$avp(ms_port)";
  $du = "sip:" + $avp(ms_host) + ":" + $avp(ms_port);
  lb_count_call("$avp(ms_host)", "$avp(ms_port)", "3", "channels");
  route(relay);
}

route[rtp_offer] {
  rtpengine_use_set("1");

  if (isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "ICE=force-relay DTLS=passive";
	else if (isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
	else if (!isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force SDES-off rtcp-mux-require";
	else if (!isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";

	rtpengine_offer("$var(rtpengine_flags)", "$var(socket)");

  # rtpengine_offer("RTP/AVP replace-session-connection replace-origin ICE=remove", "$var(socket)");
  $var(res) = $rc;
  if ($var(res)) {
    xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: For offer: use the rtpengine $var(socket) with options --> $var(rtpengine_flags)\n");
    # xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: offer sdp body =++++++++++++++===> $var(body)");
    # remove_body_part("application/sdp");
    # add_body_part("$var(body)", "application/sdp");
  }
  return($var(res));
}

route[rtp_answer] {
  rtpengine_use_set("1");

  if (isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "ICE=force-relay DTLS=passive";
	else if (isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "UDP/TLS/RTP/SAVPF ICE=force";
	else if (!isflagset(SRC_WS) && isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";
	else if (!isflagset(SRC_WS) && !isbflagset(DST_WS))
		$var(rtpengine_flags) = "RTP/AVP replace-session-connection replace-origin ICE=remove";

	rtpengine_answer("$var(rtpengine_flags)", "$var(socket)");

  # rtpengine_offer("RTP/AVP replace-session-connection replace-origin ICE=remove", "$var(socket)");
  if ($rc) {
    xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: For answer: use the rtpengine $var(socket) with options --> $var(rtpengine_flags)\n");
  }
}

route[rtp_delete] {
  rtpengine_use_set("1");
  rtpengine_delete();
}

onreply_route[1] {
  xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: [$rm] reply for request from $fu URI to $ru ------------ on reply 1");
  route(handle_nat);
  if (has_body("application/sdp"))
    route(rtp_answer);
}
onreply_route[2] {
  route(handle_nat);
  xlog("[$rm | $proto | $si:$sp | $hdr(Call-ID)]: [$rm] reply for request from $fu URI to $ru ------------ on reply 2");
  if (has_body("application/sdp"))
    route(rtp_offer);
}
